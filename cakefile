flour = require 'flour'
path = require 'path'
fs = require 'fs'
{exec} = require 'child_process'

# Constants
COFFEE = 'coffee'
DOCGEN = 'codo'
MINIFIER = 'uglifyjs'

SOURCE = 'src'
OUTPUT = 'js'
DOCOUTPUT = './doc'

DEBUG = true

minifierInstance = flour.minifiers['js']
flour.minifiers['js'] = null

buildTasks = ['core', 'types', 'utils', 'component', 'graphics', 'renderers', 'foundation', 'gui', 'pipeline', 'scene']

buildPart = (part, success) ->
  testPath = path.join 'test', 'src', 'tests', part
  fs.exists(testPath, (exists) -> compile path.join(testPath, '*.coffee'), path.join('test', 'js', 'tests', part, '*') if exists)
  
  bundle path.join(SOURCE, part, '*.coffee'), path.join(OUTPUT, "elyssa/#{part}.js"), success

((index) -> task "build:#{index}", -> buildPart index)(t) for t in buildTasks

task 'build', ->
  invoke 'clean'
  invoke 'doc'

  counter = 0
  
  sucFunc = (a) ->
    counter++
    if counter is buildTasks.length
      buildArray = []
      buildArray.push "#{OUTPUT}/elyssa/#{task}.js" for task in buildTasks
      
      bundle buildArray, "#{OUTPUT}/elyssa.js"
      
      #flour.minifiers['js'] = minifierInstance
      
      #((index) -> minify "#{OUTPUT}/elyssa/{i}.js" "#{OUTPUT}/elyssa/{i}.min.js")(i) for i in buildTasks
      
      #minify "#{OUTPUT}/elyssa.js" "#{OUTPUT}/elyssa.min.js"

  ((index) -> buildPart index, sucFunc)(t) for t in buildTasks

task 'doc', ->
  exec "#{DOCGEN} -o #{DOCOUTPUT} ${SOURCE}/*/*.coffee"

task 'clean', ->
  exec "rm -rf #{OUTPUT}/*.js"